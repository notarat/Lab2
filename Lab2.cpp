#include <iostream>
#include <string>
#include <fstream>
#include <limits>
#include <cstring>

const int MAX_OBJECTS = 100; // Максимальное количество объектов (труб и КС)

std::ofstream логФайл("лог.txt", std::ios::app);

void лог(const std::string& сообщение) {
    логФайл << сообщение << std::endl;
    std::cout << сообщение << std::endl;
}

class Объект {
protected:
    static int текущийID;
    int id;
public:
    Объект() : id(++текущийID) {}

    int получитьID() const {
        return id;
    }
};

int Объект::текущийID = 0;

class Труба : public Объект {
public:
    std::string название;
    double длина;
    double диаметр;
    bool вРемонте;

    void ввод() {
        std::cout << "Введите название трубы: ";
        std::cin.ignore();
        std::getline(std::cin, название);

        std::cout << "Введите длину трубы: ";
        while (!(std::cin >> длина) || длина < 0) {
            if (std::cin.fail()) {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "Введены неправильные значения. Десятичные дроби вводятся через точку, например: 0.1" << std::endl;
            } else {
                std::cout << "Перепроверьте значения. Длина не может быть отрицательной." << std::endl;
            }
            std::cout << "Введите длину трубы: ";
        }

        std::cout << "Введите диаметр трубы: ";
        while (!(std::cin >> диаметр) || диаметр < 0) {
            if (std::cin.fail()) {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "Введены неправильные значения. Десятичные дроби вводятся через точку, например: 0.1" << std::endl;
            } else {
                std::cout << "Перепроверьте значения. Диаметр не может быть отрицательным." << std::endl;
            }
            std::cout << "Введите диаметр трубы: ";
        }

        std::cout << "Находится ли труба в ремонте? (1 - да, 0 - нет): ";
        std::cin >> вРемонте;

        лог("Добавлена труба с ID " + std::to_string(получитьID()));
    }

    void вывод() const {
        std::cout << "ID трубы: " << получитьID() << std::endl;
        std::cout << "Название трубы: " << название << std::endl;
        std::cout << "Длина: " << длина << " км" << std::endl;
        std::cout << "Диаметр: " << диаметр << " м" << std::endl;
        std::cout << "В ремонте: " << (вРемонте ? "Да" : "Нет") << std::endl;
    }

    void изменитьСтатусРемонта() {
        std::cout << "Введите новый статус ремонта (1 - да, 0 - нет): ";
        std::cin >> вРемонте;
        лог("Изменен статус ремонта трубы с ID " + std::to_string(получитьID()));
    }
};

class КомпрессорнаяСтанция : public Объект {
public:
    std::string название;
    int общееКолВоЦехов;
    int активныеЦеха;
    double эффективность;

    void ввод() {
        std::cout << "Введите название станции: ";
        std::cin.ignore();
        std::getline(std::cin, название);

        std::cout << "Введите общее количество цехов: ";
        while (!(std::cin >> общееКолВоЦехов) || общееКолВоЦехов < 0) {
            if (std::cin.fail()) {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "Введены неправильные значения. Целые значения вводятся без запятой." << std::endl;
            } else {
                std::cout << "Перепроверьте значения. Количество не может быть отрицательным." << std::endl;
            }
            std::cout << "Введите общее количество цехов: ";
        }

        std::cout << "Введите количество активных цехов: ";
        while (!(std::cin >> активныеЦеха) || активныеЦеха > общееКолВоЦехов || активныеЦеха < 0) {
            if (std::cin.fail()) {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "Введены неправильные значения. Целые значения вводятся без запятой." << std::endl;
            } else {
                std::cout << "Активные цеха не могут превышать общее количество или быть меньше 0." << std::endl;
            }
            std::cout << "Введите количество активных цехов: ";
        }

        std::cout << "Введите эффективность станции: ";
        while (!(std::cin >> эффективность) || эффективность < 0) {
            if (std::cin.fail()) {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "Введены неправильные значения. Десятичные дроби вводятся через точку, например: 0.1" << std::endl;
            } else {
                std::cout << "Перепроверьте значения. Эффективность не может быть отрицательной." << std::endl;
            }
            std::cout << "Введите эффективность станции: ";
        }

        лог("Добавлена компрессорная станция с ID " + std::to_string(получитьID()));
    }

    void вывод() const {
        std::cout << "ID станции: " << получитьID() << std::endl;
        std::cout << "Название станции: " << название << std::endl;
        std::cout << "Общее количество цехов: " << общееКолВоЦехов << std::endl;
        std::cout << "Активные цеха: " << активныеЦеха << std::endl;
        std::cout << "Эффективность: " << эффективность << std::endl;
        std::cout << "Незадействованные цеха: " << общееКолВоЦехов - активныеЦеха << std::endl;
    }
};

// Поиск труб по названию или по признаку ремонта
int найтиТрубы(Труба трубы[], int количествоТруб, Труба* найденныеТрубы[], const std::string& название, bool ремонт = false, bool искатьПоНазванию = true) {
    int найдено = 0;
    for (int i = 0; i < количествоТруб; i++) {
        if (искатьПоНазванию && трубы[i].название == название) {
            найденныеТрубы[найдено++] = &трубы[i];
        } else if (!искатьПоНазванию && трубы[i].вРемонте == ремонт) {
            найденныеТрубы[найдено++] = &трубы[i];
        }
    }

    if (найдено == 0) {
        std::cout << "Ничего не найдено, перепроверьте запрос." << std::endl;
    }

    return найдено;
}

// Пакетное редактирование труб
void пакетноеРедактирование(Труба* найденныеТрубы[], int количествоНайденных) {
    if (количествоНайденных == 0) {
        std::cout << "Нет труб для редактирования." << std::endl;
        return;
    }

    std::cout << "Найдено труб: " << количествоНайденных << ". Вы хотите отредактировать все трубы? (1 - да, 0 - нет): ";
    bool редактироватьВсе;
    std::cin >> редактироватьВсе;

    if (редактироватьВсе) {
        for (int i = 0; i < количествоНайденных; i++) {
            найденныеТрубы[i]->изменитьСтатусРемонта();
        }
    } else {
        std::cout << "Введите индексы труб для редактирования через пробел (0 для выхода): ";
        int индекс;
        while (std::cin >> индекс && индекс != 0) {
            if (индекс > 0 && индекс <= количествоНайденных) {
                найденныеТрубы[индекс - 1]->изменитьСтатусРемонта();
            } else {
                std::cerr << "Неверный индекс." << std::endl;
            }
        }
    }

    лог("Пакетное редактирование труб завершено.");
}

// Сохранение и загрузка данных
void сохранитьВФайл(const std::string& имяФайла, Труба трубы[], int количествоТруб, КомпрессорнаяСтанция станции[], int количествоСтанций) {
    std::ofstream файл(имяФайла);
    if (!файл.is_open()) {
        std::cerr << "Ошибка открытия файла для сохранения!" << std::endl;
        return;
    }

    файл << количествоТруб << std::endl;
    for (int i = 0; i < количествоТруб; i++) {
        файл << трубы[i].название
             << std::endl << трубы[i].длина
             << std::endl << трубы[i].диаметр
             << std::endl << трубы[i].вРемонте << std::endl;
    }

    файл << количествоСтанций << std::endl;
    for (int i = 0; i < количествоСтанций; i++) {
        файл << станции[i].название
             << std::endl << станции[i].общееКолВоЦехов
             << std::endl << станции[i].активныеЦеха
             << std::endl << станции[i].эффективность << std::endl;
    }

    файл.close();
    лог("Данные успешно сохранены в файл " + имяФайла);
}

void загрузитьИзФайла(const std::string& имяФайла, Труба трубы[], int& количествоТруб, КомпрессорнаяСтанция станции[], int& количествоСтанций) {
    std::ifstream файл(имяФайла);
    if (!файл.is_open()) {
        std::cerr << "Ошибка открытия файла для загрузки!" << std::endl;
        return;
    }

    файл >> количествоТруб;
    файл.ignore();
    for (int i = 0; i < количествоТруб; i++) {
        std::getline(файл, трубы[i].название);
        файл >> трубы[i].длина >> трубы[i].диаметр >> трубы[i].вРемонте;
        файл.ignore();
    }

    файл >> количествоСтанций;
    файл.ignore();
    for (int i = 0; i < количествоСтанций; i++) {
        std::getline(файл, станции[i].название);
        файл >> станции[i].общееКолВоЦехов >> станции[i].активныеЦеха >> станции[i].эффективность;
        файл.ignore();
    }

    файл.close();
    лог("Данные успешно загружены из файла " + имяФайла);
}

// Основное меню
int main() {
    Труба трубы[MAX_OBJECTS];
    КомпрессорнаяСтанция станции[MAX_OBJECTS];
    int количествоТруб = 0, количествоСтанций = 0;
    Труба* найденныеТрубы[MAX_OBJECTS];
    int выбор;
    std::string имяФайла;

    while (true) {
        std::cout << "1. Добавить трубу" << std::endl;
        std::cout << "2. Добавить компрессорную станцию" << std::endl;
        std::cout << "3. Поиск труб по фильтру" << std::endl;
        std::cout << "4. Пакетное редактирование труб" << std::endl;
        std::cout << "5. Сохранить" << std::endl;
        std::cout << "6. Загрузить" << std::endl;
        std::cout << "0. Выход" << std::endl;
        std::cout << "Выберите действие: ";
        std::cin >> выбор;

        if (выбор == 0) {
            break;
        }

        switch (выбор) {
            case 1: {
                трубы[количествоТруб].ввод();
                количествоТруб++;
                break;
            }
            case 2: {
                станции[количествоСтанций].ввод();
                количествоСтанций++;
                break;
            }
            case 3: {
                std::cout << "1. Поиск по названию" << std::endl;
                std::cout << "2. Поиск по статусу ремонта" << std::endl;
                int фильтр;
                std::cin >> фильтр;
                if (фильтр == 1) {
                    std::string название;
                    std::cout << "Введите название: ";
                    std::cin.ignore();
                    std::getline(std::cin, название);
                    int найдено = найтиТрубы(трубы, количествоТруб, найденныеТрубы, название);
                    for (int i = 0; i < найдено; i++) {
                        найденныеТрубы[i]->вывод();
                    }
                } else if (фильтр == 2) {
                    bool ремонт;
                    std::cout << "Труба в ремонте? (1 - да, 0 - нет): ";
                    std::cin >> ремонт;
                    int найдено = найтиТрубы(трубы, количествоТруб, найденныеТрубы, "", ремонт, false);
                    for (int i = 0; i < найдено; i++) {
                        найденныеТрубы[i]->вывод();
                    }
                }
                break;
            }
            case 4: {
                std::string название;
                std::cout << "Введите название для поиска труб: ";
                std::cin.ignore();
                std::getline(std::cin, название);
                int найдено = найтиТрубы(трубы, количествоТруб, найденныеТрубы, название);
                пакетноеРедактирование(найденныеТрубы, найдено);
                break;
            }
            case 5: {
                std::cout << "Введите имя файла для сохранения: ";
                std::cin >> имяФайла;
                сохранитьВФайл(имяФайла, трубы, количествоТруб, станции, количествоСтанций);
                break;
            }
            case 6: {
                std::cout << "Введите имя файла для загрузки: ";
                std::cin >> имяФайла;
                загрузитьИзФайла(имяФайла, трубы, количествоТруб, станции, количествоСтанций);
                break;
            }
            default:
                std::cerr << "Неверная опция. Попробуйте снова." << std::endl;
        }
    }

    логФайл.close();
    return 0;
}
